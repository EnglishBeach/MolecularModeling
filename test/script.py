##########################################################################
# OpenMM input script generated by Avogadro.
# Builder adapted from OpenMM script builder http://builder.openmm.org.
##########################################################################

# from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

pdb = app.PDBFile(r'RDkit\test\input.pdb')
forcefield = app.ForceField('amber99sbildn.xml', 'spce.xml')

system = forcefield.createSystem(pdb.topology, nonbondedMethod=app.PME, nonbondedCutoff=1.0000*unit.nanometers, constraints=app.HBonds, rigidWater=True, ewaldErrorTolerance=0.00050)
integrator = mm.LangevinIntegrator(1.00000*unit.kelvin, 1.00000/unit.picoseconds, 2.00000*unit.femtoseconds)
integrator.setConstraintTolerance(0.00001)

platform = mm.Platform.getPlatformByName('CUDA')
properties = {'CudaPrecision': 'single', 'CudaDeviceIndex': '1'}
simulation = app.Simulation(pdb.topology, system, integrator, platform, properties)
simulation.context.setPositions(pdb.positions)

print('Minimizing...')
simulation.minimizeEnergy(maxIterations=1000)

simulation.context.setVelocitiesToTemperature(298.15000*unit.kelvin)
print('Equilibrating...')
simulation.step(100)

simulation.reporters.append(app.DCDReporter('trajectory.dcd', 1000))

simulation.reporters.append(app.PDBReporter('trajectory.pdb', 1000))

simulation.reporters.append(app.StateDataReporter(stdout, 1000, step=True, potentialEnergy=True, progress=True, remainingTime=True, speed=True, totalSteps=1000, separator='\t'))

print('Running Production...')
simulation.step(1000)
print('Done!')
